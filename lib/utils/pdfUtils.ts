// lib/utils/pdfUtils.ts
import * as Print from 'expo-print';
import *  as FileSystem from 'expo-file-system';
import { format } from 'date-fns';

interface PDFReportParams<T> {
  data: T[];
  reportType: 'SALES' | 'INVENTORY' | 'PRODUCT_PERFORMANCE' | 'METRICS'; // Added METRICS
  fileName: string;
  filtersApplied?: Record<string, string | null>; // Optional: for display in PDF
}

const generateHtmlHeader = (title: string, filtersApplied?: Record<string, string | null>): string => {
  let filterString = '';
  if (filtersApplied) {
    filterString = Object.entries(filtersApplied)
      .filter(([, value]) => value !== null && value !== undefined && value !== '')
      .map(([key, value]) => `<li><strong>${key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}:</strong> ${value}</li>`)
      .join('');
    if (filterString) {
      filterString = `<h3>Filters Applied:</h3><ul>${filterString}</ul>`;
    }
  }

  return `
    <html>
      <head>
        <style>
          body { font-family: Helvetica, Arial, sans-serif; margin: 20px; font-size: 10px; }
          h1 { text-align: center; color: #333; }
          h3 { color: #555; }
          table { width: 100%; border-collapse: collapse; margin-top: 15px; }
          th, td { border: 1px solid #ddd; padding: 6px; text-align: left; }
          th { background-color: #f0f0f0; }
          ul { list-style-type: none; padding-left: 0; }
          li { margin-bottom: 4px; }
          .footer { text-align: center; margin-top: 20px; font-size: 8px; color: #777; }
        </style>
      </head>
      <body>
        <h1>${title}</h1>
        <p>Generated on: ${format(new Date(), 'yyyy-MM-dd HH:mm:ss')}</p>
        ${filterString}
  `;
};

const generateHtmlFooter = (): string => {
  return `
        <div class="footer">
          Report Generated by MyStore App
        </div>
      </body>
    </html>
  `;
};

const generateSalesHtmlTable = (data: any[]): string => {
  let tableHtml = '<table><thead><tr><th>Date</th><th>Product</th><th>Payment Type</th><th>Subtotal</th></tr></thead><tbody>';
  data.forEach(item => {
    tableHtml += `<tr>
      <td>${item.date ? format(new Date(item.date), 'yyyy-MM-dd') : 'N/A'}</td>
      <td>${item.productName || item.productId || 'N/A'}</td>
      <td>${item.paymentType || 'N/A'}</td>
      <td>₹${(item.subtotal || 0).toFixed(2)}</td>
    </tr>`;
  });
  tableHtml += '</tbody></table>';
  return tableHtml;
};

const generateInventoryHtmlTable = (data: any[]): string => {
  let tableHtml = '<table><thead><tr><th>Product ID</th><th>Name</th><th>Category</th><th>Quantity</th></tr></thead><tbody>';
  data.forEach(item => {
    tableHtml += `<tr>
      <td>${item.id || 'N/A'}</td>
      <td>${item.name || 'N/A'}</td>
      <td>${item.categoryName || item.categoryId || 'N/A'}</td>
      <td>${item.quantity || 0}</td>
    </tr>`;
  });
  tableHtml += '</tbody></table>';
  return tableHtml;
};

const generateProductPerformanceHtmlTable = (data: any[]): string => {
  let tableHtml = '<table><thead><tr><th>Product</th><th>Period</th><th>Units Sold</th><th>Revenue</th><th>Cost</th><th>Margin (%)</th></tr></thead><tbody>';
  data.forEach(item => {
    tableHtml += `<tr>
      <td>${item.productName || item.productId || 'N/A'}</td>
      <td>${item.period || 'N/A'}</td>
      <td>${item.unitsSold || 0}</td>
      <td>₹${(item.revenue || 0).toFixed(2)}</td>
      <td>₹${(item.cost || 0).toFixed(2)}</td>
      <td>${(item.margin || 0).toFixed(2)}%</td>
    </tr>`;
  });
  tableHtml += '</tbody></table>';
  return tableHtml;
};

const generateMetricsHtmlList = (data: any[]): string => {
  let listHtml = '<h3>Key Metrics:</h3><ul>';
  data.forEach(item => {
    listHtml += `<li><strong>${item.metricName || 'N/A'}:</strong> ₹${(item.metricValue || 0).toFixed(2)} (as of ${item.calculationDate ? format(new Date(item.calculationDate), 'yyyy-MM-dd') : 'N/A'})</li>`;
  });
  listHtml += '</ul>';
  return listHtml;
}


export const generatePDFReport = async <T extends Record<string, any>>(
  params: PDFReportParams<T>
): Promise<string> => {
  const { data, reportType, fileName, filtersApplied } = params;
  console.log(`[PDF] Generating PDF for ${reportType}, ${data.length} items. File: ${fileName}.pdf`);

  if (!data || data.length === 0) {
    console.warn(`[PDF] No data provided for ${reportType} report.`);
    // Consider throwing an error or returning a path to a "No Data" PDF
    // For now, let's generate a PDF saying no data.
     const noDataHtml = generateHtmlHeader(`No Data for ${reportType} Report`, filtersApplied) +
                       '<p>There is no data available for the selected criteria.</p>' +
                       generateHtmlFooter();
    const { uri: noDataUri } = await Print.printToFileAsync({ html: noDataHtml });
    console.log(`[PDF] "No Data" PDF generated at: ${noDataUri}`);
    return noDataUri;
  }


  let reportContentHtml = '';
  let reportTitle = '';

  switch (reportType) {
    case 'SALES':
      reportTitle = 'Sales Report';
      reportContentHtml = generateSalesHtmlTable(data);
      break;
    case 'INVENTORY':
      reportTitle = 'Inventory Report';
      const inventoryProcessedData = data.map(item => ({ // Ensure structure for table
        id: item.id,
        name: item.name,
        quantity: item.quantity,
        categoryName: item.categoryName,
        categoryId: item.categoryId,
      }));
      reportContentHtml = generateInventoryHtmlTable(inventoryProcessedData);
      break;
    case 'PRODUCT_PERFORMANCE':
      reportTitle = 'Product Performance Report';
      reportContentHtml = generateProductPerformanceHtmlTable(data);
      break;
    case 'METRICS': // Added handling for metrics
      reportTitle = 'Key Metrics Summary';
      reportContentHtml = generateMetricsHtmlList(data);
      break;
    default:
      throw new Error(`Unsupported report type for PDF: ${reportType}`);
  }

  const html = generateHtmlHeader(reportTitle, filtersApplied) + reportContentHtml + generateHtmlFooter();

  try {
    const { uri } = await Print.printToFileAsync({ html });
    console.log(`[PDF] PDF generated successfully at: ${uri}`);

    // Optional: Move to a more permanent location if needed, expo-print URI is temporary
    // const pdfName = `${fileName.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`;
    // const newPath = `${FileSystem.documentDirectory}${pdfName}`;
    // await FileSystem.moveAsync({
    //   from: uri,
    //   to: newPath,
    // });
    // console.log(`[PDF] Moved to: ${newPath}`);
    // return newPath;
    return uri; // The URI from printToFileAsync is usually fine for sharing directly

  } catch (error) {
    console.error('[PDF] Error generating PDF:', error);
    throw new Error(`Failed to generate PDF: ${error instanceof Error ? error.message : String(error)}`);
  }
};